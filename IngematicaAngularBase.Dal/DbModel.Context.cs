//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IngematicaAngularBase.Dal
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using IngematicaAngularBase.Model.Entities;

    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<ClienteDireccionEntrega> ClienteDireccionEntrega { get; set; }
        public virtual DbSet<ColaImpresion> ColaImpresion { get; set; }
        public virtual DbSet<Color> Color { get; set; }
        public virtual DbSet<Despacho> Despacho { get; set; }
        public virtual DbSet<DespachoBulto> DespachoBulto { get; set; }
        public virtual DbSet<DespachoTercero> DespachoTercero { get; set; }
        public virtual DbSet<DespachoTerceroBulto> DespachoTerceroBulto { get; set; }
        public virtual DbSet<DespachoTerceroBultoEstado> DespachoTerceroBultoEstado { get; set; }
        public virtual DbSet<DespachoTerceroBultoRespuesta> DespachoTerceroBultoRespuesta { get; set; }
        public virtual DbSet<DespachoTerceroRespuesta> DespachoTerceroRespuesta { get; set; }
        public virtual DbSet<Embalaje> Embalaje { get; set; }
        public virtual DbSet<EmbalajeBulto> EmbalajeBulto { get; set; }
        public virtual DbSet<Empresa> Empresa { get; set; }
        public virtual DbSet<EmpresaCai> EmpresaCai { get; set; }
        public virtual DbSet<ExcedenteHabilitado> ExcedenteHabilitado { get; set; }
        public virtual DbSet<Genero> Genero { get; set; }
        public virtual DbSet<HistoricoProgramacionPedidoProducto> HistoricoProgramacionPedidoProducto { get; set; }
        public virtual DbSet<Impresora> Impresora { get; set; }
        public virtual DbSet<Inserto> Inserto { get; set; }
        public virtual DbSet<InsertoClase> InsertoClase { get; set; }
        public virtual DbSet<Inyeccion> Inyeccion { get; set; }
        public virtual DbSet<InyeccionEstacion> InyeccionEstacion { get; set; }
        public virtual DbSet<InyeccionEstacionCajon> InyeccionEstacionCajon { get; set; }
        public virtual DbSet<InyeccionEstacionPedido> InyeccionEstacionPedido { get; set; }
        public virtual DbSet<Inyectora> Inyectora { get; set; }
        public virtual DbSet<InyectoraEstacion> InyectoraEstacion { get; set; }
        public virtual DbSet<InyectoraOperario> InyectoraOperario { get; set; }
        public virtual DbSet<Laca> Laca { get; set; }
        public virtual DbSet<Localidad> Localidad { get; set; }
        public virtual DbSet<Log> Log { get; set; }
        public virtual DbSet<Material> Material { get; set; }
        public virtual DbSet<MaterialColor> MaterialColor { get; set; }
        public virtual DbSet<MaterialInyectora> MaterialInyectora { get; set; }
        public virtual DbSet<MaterialMateriaPrima> MaterialMateriaPrima { get; set; }
        public virtual DbSet<MaterialTipo> MaterialTipo { get; set; }
        public virtual DbSet<MateriaPrima> MateriaPrima { get; set; }
        public virtual DbSet<MateriaPrimaClase> MateriaPrimaClase { get; set; }
        public virtual DbSet<MateriaPrimaMarca> MateriaPrimaMarca { get; set; }
        public virtual DbSet<Medida> Medida { get; set; }
        public virtual DbSet<Modulo> Modulo { get; set; }
        public virtual DbSet<Molde> Molde { get; set; }
        public virtual DbSet<MoldeInyectora> MoldeInyectora { get; set; }
        public virtual DbSet<MoldeMedida> MoldeMedida { get; set; }
        public virtual DbSet<Pais> Pais { get; set; }
        public virtual DbSet<Pedido> Pedido { get; set; }
        public virtual DbSet<PedidoEstado> PedidoEstado { get; set; }
        public virtual DbSet<PedidoEstadoProceso> PedidoEstadoProceso { get; set; }
        public virtual DbSet<PedidoProductoCajon> PedidoProductoCajon { get; set; }
        public virtual DbSet<PedidoProductoMedida> PedidoProductoMedida { get; set; }
        public virtual DbSet<PedidoProductoMedidaEstado> PedidoProductoMedidaEstado { get; set; }
        public virtual DbSet<PedidoProductoProceso> PedidoProductoProceso { get; set; }
        public virtual DbSet<PedidoTipo> PedidoTipo { get; set; }
        public virtual DbSet<Proceso> Proceso { get; set; }
        public virtual DbSet<Producto> Producto { get; set; }
        public virtual DbSet<ProductoInserto> ProductoInserto { get; set; }
        public virtual DbSet<ProductoMaterial> ProductoMaterial { get; set; }
        public virtual DbSet<ProductoMedida> ProductoMedida { get; set; }
        public virtual DbSet<ProductoProceso> ProductoProceso { get; set; }
        public virtual DbSet<ProductoTipo> ProductoTipo { get; set; }
        public virtual DbSet<ProgramacionDevolucion> ProgramacionDevolucion { get; set; }
        public virtual DbSet<ProgramacionPedidoProducto> ProgramacionPedidoProducto { get; set; }
        public virtual DbSet<Proveedor> Proveedor { get; set; }
        public virtual DbSet<ProveedorProceso> ProveedorProceso { get; set; }
        public virtual DbSet<Provincia> Provincia { get; set; }
        public virtual DbSet<PuntoVenta> PuntoVenta { get; set; }
        public virtual DbSet<Regla> Regla { get; set; }
        public virtual DbSet<Reinyeccion> Reinyeccion { get; set; }
        public virtual DbSet<Reprogramacion> Reprogramacion { get; set; }
        public virtual DbSet<Rol> Rol { get; set; }
        public virtual DbSet<RolRegla> RolRegla { get; set; }
        public virtual DbSet<SecurityClient> SecurityClient { get; set; }
        public virtual DbSet<SecurityRefreshToken> SecurityRefreshToken { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TipoMedida> TipoMedida { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
    
        public virtual int Cantidades_Por_Semana(Nullable<int> idCliente, Nullable<System.DateTime> fechaDesde, Nullable<System.DateTime> fechaHasta)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(System.DateTime));
    
            var fechaHastaParameter = fechaHasta.HasValue ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Cantidades_Por_Semana", idClienteParameter, fechaDesdeParameter, fechaHastaParameter);
        }
    
        public virtual ObjectResult<Cantidades_Por_Semana_Medida_Result> Cantidades_Por_Semana_Medida(Nullable<int> idMolde, Nullable<int> idCliente, Nullable<System.DateTime> fechaDesde, Nullable<System.DateTime> fechaHasta)
        {
            var idMoldeParameter = idMolde.HasValue ?
                new ObjectParameter("IdMolde", idMolde) :
                new ObjectParameter("IdMolde", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(System.DateTime));
    
            var fechaHastaParameter = fechaHasta.HasValue ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Cantidades_Por_Semana_Medida_Result>("Cantidades_Por_Semana_Medida", idMoldeParameter, idClienteParameter, fechaDesdeParameter, fechaHastaParameter);
        }
    
        public virtual int Cargar_Pedidos_Y_Replica(Nullable<int> idPedidoEstado, Nullable<int> idCliente, Nullable<int> idClienteDireccionEntrega, Nullable<int> idProducto, string ordenCompra, Nullable<int> idPedidoTipo, Nullable<int> idUsuarioAlta, Nullable<int> idUsaurioModificacion, Nullable<System.DateTime> fechaModificacion)
        {
            var idPedidoEstadoParameter = idPedidoEstado.HasValue ?
                new ObjectParameter("IdPedidoEstado", idPedidoEstado) :
                new ObjectParameter("IdPedidoEstado", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idClienteDireccionEntregaParameter = idClienteDireccionEntrega.HasValue ?
                new ObjectParameter("IdClienteDireccionEntrega", idClienteDireccionEntrega) :
                new ObjectParameter("IdClienteDireccionEntrega", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var ordenCompraParameter = ordenCompra != null ?
                new ObjectParameter("OrdenCompra", ordenCompra) :
                new ObjectParameter("OrdenCompra", typeof(string));
    
            var idPedidoTipoParameter = idPedidoTipo.HasValue ?
                new ObjectParameter("IdPedidoTipo", idPedidoTipo) :
                new ObjectParameter("IdPedidoTipo", typeof(int));
    
            var idUsuarioAltaParameter = idUsuarioAlta.HasValue ?
                new ObjectParameter("IdUsuarioAlta", idUsuarioAlta) :
                new ObjectParameter("IdUsuarioAlta", typeof(int));
    
            var idUsaurioModificacionParameter = idUsaurioModificacion.HasValue ?
                new ObjectParameter("IdUsaurioModificacion", idUsaurioModificacion) :
                new ObjectParameter("IdUsaurioModificacion", typeof(int));
    
            var fechaModificacionParameter = fechaModificacion.HasValue ?
                new ObjectParameter("FechaModificacion", fechaModificacion) :
                new ObjectParameter("FechaModificacion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Cargar_Pedidos_Y_Replica", idPedidoEstadoParameter, idClienteParameter, idClienteDireccionEntregaParameter, idProductoParameter, ordenCompraParameter, idPedidoTipoParameter, idUsuarioAltaParameter, idUsaurioModificacionParameter, fechaModificacionParameter);
        }
    
        public virtual int ChangeUsuarioPassword(string nombreUsuario, string password, string passwordSalt)
        {
            var nombreUsuarioParameter = nombreUsuario != null ?
                new ObjectParameter("NombreUsuario", nombreUsuario) :
                new ObjectParameter("NombreUsuario", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeUsuarioPassword", nombreUsuarioParameter, passwordParameter, passwordSaltParameter);
        }
    
        public virtual int Cliente_Cumplimiento(Nullable<System.DateTime> fechaDesde, Nullable<System.DateTime> fechaHasta)
        {
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(System.DateTime));
    
            var fechaHastaParameter = fechaHasta.HasValue ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Cliente_Cumplimiento", fechaDesdeParameter, fechaHastaParameter);
        }
    
        public virtual ObjectResult<Cliente_stock_Result> Cliente_stock(Nullable<int> idCliente)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Cliente_stock_Result>("Cliente_stock", idClienteParameter);
        }
    
        public virtual ObjectResult<Data_Despachar_Result> Data_Despachar(Nullable<int> idProducto, Nullable<int> idCliente, Nullable<int> idPedido)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Data_Despachar_Result>("Data_Despachar", idProductoParameter, idClienteParameter, idPedidoParameter);
        }
    
        public virtual ObjectResult<Data_Despachar_Search_Result> Data_Despachar_Search(Nullable<int> idProducto, Nullable<int> idCliente, Nullable<int> idPedido)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Data_Despachar_Search_Result>("Data_Despachar_Search", idProductoParameter, idClienteParameter, idPedidoParameter);
        }
    
        public virtual ObjectResult<Data_Despachar_Tercero_Result> Data_Despachar_Tercero(Nullable<int> idProducto, Nullable<int> idCliente, Nullable<int> idPedido)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Data_Despachar_Tercero_Result>("Data_Despachar_Tercero", idProductoParameter, idClienteParameter, idPedidoParameter);
        }
    
        public virtual int Data_Ingresar_Tercero(string numeroPedido, Nullable<int> idProducto, Nullable<int> idCliente)
        {
            var numeroPedidoParameter = numeroPedido != null ?
                new ObjectParameter("NumeroPedido", numeroPedido) :
                new ObjectParameter("NumeroPedido", typeof(string));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Data_Ingresar_Tercero", numeroPedidoParameter, idProductoParameter, idClienteParameter);
        }
    
        public virtual ObjectResult<Dato_InyectoraOperario_Result> Dato_InyectoraOperario(Nullable<int> idInyectora, Nullable<System.DateTime> fechaDesde, Nullable<System.DateTime> fechaHasta)
        {
            var idInyectoraParameter = idInyectora.HasValue ?
                new ObjectParameter("IdInyectora", idInyectora) :
                new ObjectParameter("IdInyectora", typeof(int));
    
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(System.DateTime));
    
            var fechaHastaParameter = fechaHasta.HasValue ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dato_InyectoraOperario_Result>("Dato_InyectoraOperario", idInyectoraParameter, fechaDesdeParameter, fechaHastaParameter);
        }
    
        public virtual ObjectResult<Dato_Pedido_Programar_Result> Dato_Pedido_Programar(Nullable<int> idPedido)
        {
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dato_Pedido_Programar_Result>("Dato_Pedido_Programar", idPedidoParameter);
        }
    
        public virtual int Datos_Pedido(Nullable<int> idProducto, Nullable<int> idMolde, Nullable<int> idMaterial, Nullable<int> idCliente, Nullable<System.DateTime> fechaDesde, Nullable<System.DateTime> fechaHasta)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var idMoldeParameter = idMolde.HasValue ?
                new ObjectParameter("IdMolde", idMolde) :
                new ObjectParameter("IdMolde", typeof(int));
    
            var idMaterialParameter = idMaterial.HasValue ?
                new ObjectParameter("IdMaterial", idMaterial) :
                new ObjectParameter("IdMaterial", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(System.DateTime));
    
            var fechaHastaParameter = fechaHasta.HasValue ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Datos_Pedido", idProductoParameter, idMoldeParameter, idMaterialParameter, idClienteParameter, fechaDesdeParameter, fechaHastaParameter);
        }
    
        public virtual int Datos_Pedido_Extended(Nullable<int> idProducto, Nullable<int> idMolde, Nullable<int> idMaterial, Nullable<int> idCliente, Nullable<System.DateTime> fechaDesde, Nullable<System.DateTime> fechaHasta)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var idMoldeParameter = idMolde.HasValue ?
                new ObjectParameter("IdMolde", idMolde) :
                new ObjectParameter("IdMolde", typeof(int));
    
            var idMaterialParameter = idMaterial.HasValue ?
                new ObjectParameter("IdMaterial", idMaterial) :
                new ObjectParameter("IdMaterial", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(System.DateTime));
    
            var fechaHastaParameter = fechaHasta.HasValue ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Datos_Pedido_Extended", idProductoParameter, idMoldeParameter, idMaterialParameter, idClienteParameter, fechaDesdeParameter, fechaHastaParameter);
        }
    
        public virtual int Get_Cantidad_Maxima_A_Ingresar(Nullable<int> idEmbalaje)
        {
            var idEmbalajeParameter = idEmbalaje.HasValue ?
                new ObjectParameter("idEmbalaje", idEmbalaje) :
                new ObjectParameter("idEmbalaje", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_Cantidad_Maxima_A_Ingresar", idEmbalajeParameter);
        }
    
        public virtual ObjectResult<Get_Data_Grafico_Cantidad_Por_Inyectora_Result> Get_Data_Grafico_Cantidad_Por_Inyectora(Nullable<int> idCliente, Nullable<int> idProducto, string numeroPedido, Nullable<System.DateTime> fechaDesde, Nullable<System.DateTime> fechaHasta, Nullable<int> idInyectora)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var numeroPedidoParameter = numeroPedido != null ?
                new ObjectParameter("NumeroPedido", numeroPedido) :
                new ObjectParameter("NumeroPedido", typeof(string));
    
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(System.DateTime));
    
            var fechaHastaParameter = fechaHasta.HasValue ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(System.DateTime));
    
            var idInyectoraParameter = idInyectora.HasValue ?
                new ObjectParameter("IdInyectora", idInyectora) :
                new ObjectParameter("IdInyectora", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Data_Grafico_Cantidad_Por_Inyectora_Result>("Get_Data_Grafico_Cantidad_Por_Inyectora", idClienteParameter, idProductoParameter, numeroPedidoParameter, fechaDesdeParameter, fechaHastaParameter, idInyectoraParameter);
        }
    
        public virtual int Get_Data_Grafico_Inyeccion_Diaria_Pedido(Nullable<int> idCliente, Nullable<int> idProducto, string numeroPedido, Nullable<System.DateTime> fechaDesde, Nullable<System.DateTime> fechaHasta, Nullable<int> idInyectora)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var numeroPedidoParameter = numeroPedido != null ?
                new ObjectParameter("NumeroPedido", numeroPedido) :
                new ObjectParameter("NumeroPedido", typeof(string));
    
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(System.DateTime));
    
            var fechaHastaParameter = fechaHasta.HasValue ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(System.DateTime));
    
            var idInyectoraParameter = idInyectora.HasValue ?
                new ObjectParameter("IdInyectora", idInyectora) :
                new ObjectParameter("IdInyectora", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_Data_Grafico_Inyeccion_Diaria_Pedido", idClienteParameter, idProductoParameter, numeroPedidoParameter, fechaDesdeParameter, fechaHastaParameter, idInyectoraParameter);
        }
    
        public virtual int GetCantidadProgramada(Nullable<int> idProgramacionPedidoProducto, Nullable<System.DateTime> fecha, Nullable<int> idInyectoraEstacion)
        {
            var idProgramacionPedidoProductoParameter = idProgramacionPedidoProducto.HasValue ?
                new ObjectParameter("IdProgramacionPedidoProducto", idProgramacionPedidoProducto) :
                new ObjectParameter("IdProgramacionPedidoProducto", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var idInyectoraEstacionParameter = idInyectoraEstacion.HasValue ?
                new ObjectParameter("IdInyectoraEstacion", idInyectoraEstacion) :
                new ObjectParameter("IdInyectoraEstacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCantidadProgramada", idProgramacionPedidoProductoParameter, fechaParameter, idInyectoraEstacionParameter);
        }
    
        public virtual int GetCantidadProgramadaDiaria(Nullable<int> idInyectora, Nullable<System.DateTime> fecha, Nullable<int> idProgramacionPedidoProducto, Nullable<int> idInyectoraEstacion)
        {
            var idInyectoraParameter = idInyectora.HasValue ?
                new ObjectParameter("IdInyectora", idInyectora) :
                new ObjectParameter("IdInyectora", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var idProgramacionPedidoProductoParameter = idProgramacionPedidoProducto.HasValue ?
                new ObjectParameter("IdProgramacionPedidoProducto", idProgramacionPedidoProducto) :
                new ObjectParameter("IdProgramacionPedidoProducto", typeof(int));
    
            var idInyectoraEstacionParameter = idInyectoraEstacion.HasValue ?
                new ObjectParameter("IdInyectoraEstacion", idInyectoraEstacion) :
                new ObjectParameter("IdInyectoraEstacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCantidadProgramadaDiaria", idInyectoraParameter, fechaParameter, idProgramacionPedidoProductoParameter, idInyectoraEstacionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetPedidosProgramados(Nullable<int> idInyectoraEstacion, Nullable<System.DateTime> fechaDesde, Nullable<System.DateTime> fechaHasta)
        {
            var idInyectoraEstacionParameter = idInyectoraEstacion.HasValue ?
                new ObjectParameter("IdInyectoraEstacion", idInyectoraEstacion) :
                new ObjectParameter("IdInyectoraEstacion", typeof(int));
    
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(System.DateTime));
    
            var fechaHastaParameter = fechaHasta.HasValue ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetPedidosProgramados", idInyectoraEstacionParameter, fechaDesdeParameter, fechaHastaParameter);
        }
    
        public virtual int GetPedsProdMeds_To_Extend_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPedsProdMeds_To_Extend_List");
        }
    
        public virtual int GetProgramacionInyectora(Nullable<int> idInyectora, Nullable<System.DateTime> fechaInicio, Nullable<System.DateTime> fechaFin, Nullable<long> diasGraficar)
        {
            var idInyectoraParameter = idInyectora.HasValue ?
                new ObjectParameter("IdInyectora", idInyectora) :
                new ObjectParameter("IdInyectora", typeof(int));
    
            var fechaInicioParameter = fechaInicio.HasValue ?
                new ObjectParameter("FechaInicio", fechaInicio) :
                new ObjectParameter("FechaInicio", typeof(System.DateTime));
    
            var fechaFinParameter = fechaFin.HasValue ?
                new ObjectParameter("FechaFin", fechaFin) :
                new ObjectParameter("FechaFin", typeof(System.DateTime));
    
            var diasGraficarParameter = diasGraficar.HasValue ?
                new ObjectParameter("DiasGraficar", diasGraficar) :
                new ObjectParameter("DiasGraficar", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetProgramacionInyectora", idInyectoraParameter, fechaInicioParameter, fechaFinParameter, diasGraficarParameter);
        }
    
        public virtual ObjectResult<GetSecurityClient_Result> GetSecurityClient(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSecurityClient_Result>("GetSecurityClient", nameParameter);
        }
    
        public virtual ObjectResult<GetSecurityRefreshToken_Result> GetSecurityRefreshToken(string token)
        {
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSecurityRefreshToken_Result>("GetSecurityRefreshToken", tokenParameter);
        }
    
        public virtual ObjectResult<GetUsuarioGuid_Result> GetUsuarioGuid(string resetPasswordGuid)
        {
            var resetPasswordGuidParameter = resetPasswordGuid != null ?
                new ObjectParameter("ResetPasswordGuid", resetPasswordGuid) :
                new ObjectParameter("ResetPasswordGuid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUsuarioGuid_Result>("GetUsuarioGuid", resetPasswordGuidParameter);
        }
    
        public virtual ObjectResult<GetUsuarioLogin_Result> GetUsuarioLogin(string nombreUsuario)
        {
            var nombreUsuarioParameter = nombreUsuario != null ?
                new ObjectParameter("NombreUsuario", nombreUsuario) :
                new ObjectParameter("NombreUsuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUsuarioLogin_Result>("GetUsuarioLogin", nombreUsuarioParameter);
        }
    
        public virtual int Grabar_Bultos(Nullable<int> idProceso, Nullable<int> idCliente, Nullable<int> idPedido, Nullable<int> cantidad)
        {
            var idProcesoParameter = idProceso.HasValue ?
                new ObjectParameter("IdProceso", idProceso) :
                new ObjectParameter("IdProceso", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Grabar_Bultos", idProcesoParameter, idClienteParameter, idPedidoParameter, cantidadParameter);
        }
    
        public virtual int Grabar_despacho_bulto_from_tercerizado(Nullable<int> idEmbalaje, Nullable<int> cantidad, Nullable<int> idPedidodProductoMedida, Nullable<int> scrap)
        {
            var idEmbalajeParameter = idEmbalaje.HasValue ?
                new ObjectParameter("IdEmbalaje", idEmbalaje) :
                new ObjectParameter("IdEmbalaje", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var idPedidodProductoMedidaParameter = idPedidodProductoMedida.HasValue ?
                new ObjectParameter("IdPedidodProductoMedida", idPedidodProductoMedida) :
                new ObjectParameter("IdPedidodProductoMedida", typeof(int));
    
            var scrapParameter = scrap.HasValue ?
                new ObjectParameter("Scrap", scrap) :
                new ObjectParameter("Scrap", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Grabar_despacho_bulto_from_tercerizado", idEmbalajeParameter, cantidadParameter, idPedidodProductoMedidaParameter, scrapParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Grabar_Despacho_Tercero(Nullable<int> idProveedor, Nullable<int> cantidad, Nullable<int> idProceso)
        {
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var idProcesoParameter = idProceso.HasValue ?
                new ObjectParameter("IdProceso", idProceso) :
                new ObjectParameter("IdProceso", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Grabar_Despacho_Tercero", idProveedorParameter, cantidadParameter, idProcesoParameter);
        }
    
        public virtual int Grabar_despacho_tercero_bulto_from_tercerizado(Nullable<int> idDespachoTerceroRespuesta, Nullable<int> idEmbalaje, Nullable<int> idEmbalajeRespuesta, Nullable<int> cantidadIngreso, Nullable<int> scrap, Nullable<int> idPedidoProductoMedida)
        {
            var idDespachoTerceroRespuestaParameter = idDespachoTerceroRespuesta.HasValue ?
                new ObjectParameter("IdDespachoTerceroRespuesta", idDespachoTerceroRespuesta) :
                new ObjectParameter("IdDespachoTerceroRespuesta", typeof(int));
    
            var idEmbalajeParameter = idEmbalaje.HasValue ?
                new ObjectParameter("IdEmbalaje", idEmbalaje) :
                new ObjectParameter("IdEmbalaje", typeof(int));
    
            var idEmbalajeRespuestaParameter = idEmbalajeRespuesta.HasValue ?
                new ObjectParameter("IdEmbalajeRespuesta", idEmbalajeRespuesta) :
                new ObjectParameter("IdEmbalajeRespuesta", typeof(int));
    
            var cantidadIngresoParameter = cantidadIngreso.HasValue ?
                new ObjectParameter("CantidadIngreso", cantidadIngreso) :
                new ObjectParameter("CantidadIngreso", typeof(int));
    
            var scrapParameter = scrap.HasValue ?
                new ObjectParameter("Scrap", scrap) :
                new ObjectParameter("Scrap", typeof(int));
    
            var idPedidoProductoMedidaParameter = idPedidoProductoMedida.HasValue ?
                new ObjectParameter("IdPedidoProductoMedida", idPedidoProductoMedida) :
                new ObjectParameter("IdPedidoProductoMedida", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Grabar_despacho_tercero_bulto_from_tercerizado", idDespachoTerceroRespuestaParameter, idEmbalajeParameter, idEmbalajeRespuestaParameter, cantidadIngresoParameter, scrapParameter, idPedidoProductoMedidaParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Grabar_despacho_tercero_respuesta(Nullable<int> idDespachoTercero, Nullable<System.DateTime> fecha, Nullable<int> cantidad, Nullable<int> scrap)
        {
            var idDespachoTerceroParameter = idDespachoTercero.HasValue ?
                new ObjectParameter("IdDespachoTercero", idDespachoTercero) :
                new ObjectParameter("IdDespachoTercero", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var scrapParameter = scrap.HasValue ?
                new ObjectParameter("Scrap", scrap) :
                new ObjectParameter("Scrap", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Grabar_despacho_tercero_respuesta", idDespachoTerceroParameter, fechaParameter, cantidadParameter, scrapParameter);
        }
    
        public virtual int Grabar_Despachos(Nullable<int> cantidad, Nullable<int> idClienteDireccionEntrega, Nullable<int> idCliente)
        {
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var idClienteDireccionEntregaParameter = idClienteDireccionEntrega.HasValue ?
                new ObjectParameter("IdClienteDireccionEntrega", idClienteDireccionEntrega) :
                new ObjectParameter("IdClienteDireccionEntrega", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Grabar_Despachos", cantidadParameter, idClienteDireccionEntregaParameter, idClienteParameter);
        }
    
        public virtual int Grabar_Embalaje(Nullable<int> idProceso, Nullable<int> idCliente, Nullable<int> idPedido, Nullable<int> cantidad)
        {
            var idProcesoParameter = idProceso.HasValue ?
                new ObjectParameter("IdProceso", idProceso) :
                new ObjectParameter("IdProceso", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Grabar_Embalaje", idProcesoParameter, idClienteParameter, idPedidoParameter, cantidadParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Grabar_embalaje_from_proceso_tercero(Nullable<int> idEmbalaje, Nullable<int> cantidad, Nullable<System.DateTime> fecha)
        {
            var idEmbalajeParameter = idEmbalaje.HasValue ?
                new ObjectParameter("IdEmbalaje", idEmbalaje) :
                new ObjectParameter("IdEmbalaje", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Grabar_embalaje_from_proceso_tercero", idEmbalajeParameter, cantidadParameter, fechaParameter);
        }
    
        public virtual int Grabar_PedProdMed_Y_Replica(Nullable<int> idPedido, string medida, Nullable<int> cantidad, Nullable<System.DateTime> fechaEntrega)
        {
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(int));
    
            var medidaParameter = medida != null ?
                new ObjectParameter("Medida", medida) :
                new ObjectParameter("Medida", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var fechaEntregaParameter = fechaEntrega.HasValue ?
                new ObjectParameter("FechaEntrega", fechaEntrega) :
                new ObjectParameter("FechaEntrega", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Grabar_PedProdMed_Y_Replica", idPedidoParameter, medidaParameter, cantidadParameter, fechaEntregaParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Insert_Pedido_RetornoId(Nullable<System.DateTime> fechaAlta, Nullable<int> idUsuarioModificacion, Nullable<int> idCliente, Nullable<int> idClienteDireccionEntrega, Nullable<int> idProducto, Nullable<int> idPedidoTipo, Nullable<int> idUsuarioAlta, Nullable<int> idPedidoEstado, string ordenCompra)
        {
            var fechaAltaParameter = fechaAlta.HasValue ?
                new ObjectParameter("FechaAlta", fechaAlta) :
                new ObjectParameter("FechaAlta", typeof(System.DateTime));
    
            var idUsuarioModificacionParameter = idUsuarioModificacion.HasValue ?
                new ObjectParameter("IdUsuarioModificacion", idUsuarioModificacion) :
                new ObjectParameter("IdUsuarioModificacion", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idClienteDireccionEntregaParameter = idClienteDireccionEntrega.HasValue ?
                new ObjectParameter("IdClienteDireccionEntrega", idClienteDireccionEntrega) :
                new ObjectParameter("IdClienteDireccionEntrega", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var idPedidoTipoParameter = idPedidoTipo.HasValue ?
                new ObjectParameter("IdPedidoTipo", idPedidoTipo) :
                new ObjectParameter("IdPedidoTipo", typeof(int));
    
            var idUsuarioAltaParameter = idUsuarioAlta.HasValue ?
                new ObjectParameter("IdUsuarioAlta", idUsuarioAlta) :
                new ObjectParameter("IdUsuarioAlta", typeof(int));
    
            var idPedidoEstadoParameter = idPedidoEstado.HasValue ?
                new ObjectParameter("IdPedidoEstado", idPedidoEstado) :
                new ObjectParameter("IdPedidoEstado", typeof(int));
    
            var ordenCompraParameter = ordenCompra != null ?
                new ObjectParameter("OrdenCompra", ordenCompra) :
                new ObjectParameter("OrdenCompra", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Insert_Pedido_RetornoId", fechaAltaParameter, idUsuarioModificacionParameter, idClienteParameter, idClienteDireccionEntregaParameter, idProductoParameter, idPedidoTipoParameter, idUsuarioAltaParameter, idPedidoEstadoParameter, ordenCompraParameter);
        }
    
        public virtual int InsertInterfaceLog(Nullable<System.DateTime> fecha, string descripcion, string stackTrace, string exceptionMessage, Nullable<int> idInterface, Nullable<int> idInterfaceLogTipo, string otrosDatos, string archivoNombre)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var stackTraceParameter = stackTrace != null ?
                new ObjectParameter("StackTrace", stackTrace) :
                new ObjectParameter("StackTrace", typeof(string));
    
            var exceptionMessageParameter = exceptionMessage != null ?
                new ObjectParameter("ExceptionMessage", exceptionMessage) :
                new ObjectParameter("ExceptionMessage", typeof(string));
    
            var idInterfaceParameter = idInterface.HasValue ?
                new ObjectParameter("IdInterface", idInterface) :
                new ObjectParameter("IdInterface", typeof(int));
    
            var idInterfaceLogTipoParameter = idInterfaceLogTipo.HasValue ?
                new ObjectParameter("IdInterfaceLogTipo", idInterfaceLogTipo) :
                new ObjectParameter("IdInterfaceLogTipo", typeof(int));
    
            var otrosDatosParameter = otrosDatos != null ?
                new ObjectParameter("OtrosDatos", otrosDatos) :
                new ObjectParameter("OtrosDatos", typeof(string));
    
            var archivoNombreParameter = archivoNombre != null ?
                new ObjectParameter("ArchivoNombre", archivoNombre) :
                new ObjectParameter("ArchivoNombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertInterfaceLog", fechaParameter, descripcionParameter, stackTraceParameter, exceptionMessageParameter, idInterfaceParameter, idInterfaceLogTipoParameter, otrosDatosParameter, archivoNombreParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertLog(string descripcion, string descripcion2, string controller, string accion, string otrosDatos, string usuario)
        {
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var descripcion2Parameter = descripcion2 != null ?
                new ObjectParameter("Descripcion2", descripcion2) :
                new ObjectParameter("Descripcion2", typeof(string));
    
            var controllerParameter = controller != null ?
                new ObjectParameter("Controller", controller) :
                new ObjectParameter("Controller", typeof(string));
    
            var accionParameter = accion != null ?
                new ObjectParameter("Accion", accion) :
                new ObjectParameter("Accion", typeof(string));
    
            var otrosDatosParameter = otrosDatos != null ?
                new ObjectParameter("OtrosDatos", otrosDatos) :
                new ObjectParameter("OtrosDatos", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertLog", descripcionParameter, descripcion2Parameter, controllerParameter, accionParameter, otrosDatosParameter, usuarioParameter);
        }
    
        public virtual int InsertSecurityRefreshToken(string token, string username, string clienteId, Nullable<System.DateTime> issuedUtc, Nullable<System.DateTime> expiresUtc, string protectedTicket)
        {
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var clienteIdParameter = clienteId != null ?
                new ObjectParameter("ClienteId", clienteId) :
                new ObjectParameter("ClienteId", typeof(string));
    
            var issuedUtcParameter = issuedUtc.HasValue ?
                new ObjectParameter("IssuedUtc", issuedUtc) :
                new ObjectParameter("IssuedUtc", typeof(System.DateTime));
    
            var expiresUtcParameter = expiresUtc.HasValue ?
                new ObjectParameter("ExpiresUtc", expiresUtc) :
                new ObjectParameter("ExpiresUtc", typeof(System.DateTime));
    
            var protectedTicketParameter = protectedTicket != null ?
                new ObjectParameter("ProtectedTicket", protectedTicket) :
                new ObjectParameter("ProtectedTicket", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSecurityRefreshToken", tokenParameter, usernameParameter, clienteIdParameter, issuedUtcParameter, expiresUtcParameter, protectedTicketParameter);
        }
    
        public virtual int InsertUserPasswordGuid(string nombreUsuario, string resetPasswordGuid, Nullable<System.DateTime> resetPasswordFecha)
        {
            var nombreUsuarioParameter = nombreUsuario != null ?
                new ObjectParameter("NombreUsuario", nombreUsuario) :
                new ObjectParameter("NombreUsuario", typeof(string));
    
            var resetPasswordGuidParameter = resetPasswordGuid != null ?
                new ObjectParameter("ResetPasswordGuid", resetPasswordGuid) :
                new ObjectParameter("ResetPasswordGuid", typeof(string));
    
            var resetPasswordFechaParameter = resetPasswordFecha.HasValue ?
                new ObjectParameter("ResetPasswordFecha", resetPasswordFecha) :
                new ObjectParameter("ResetPasswordFecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUserPasswordGuid", nombreUsuarioParameter, resetPasswordGuidParameter, resetPasswordFechaParameter);
        }
    
        public virtual ObjectResult<Inyeccion_AgregarCajon_Result> Inyeccion_AgregarCajon(Nullable<int> idProgramacionPedidoProducto, Nullable<int> idPedidoProductoMedida, Nullable<int> cantidad, Nullable<int> idProceso)
        {
            var idProgramacionPedidoProductoParameter = idProgramacionPedidoProducto.HasValue ?
                new ObjectParameter("IdProgramacionPedidoProducto", idProgramacionPedidoProducto) :
                new ObjectParameter("IdProgramacionPedidoProducto", typeof(int));
    
            var idPedidoProductoMedidaParameter = idPedidoProductoMedida.HasValue ?
                new ObjectParameter("IdPedidoProductoMedida", idPedidoProductoMedida) :
                new ObjectParameter("IdPedidoProductoMedida", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var idProcesoParameter = idProceso.HasValue ?
                new ObjectParameter("IdProceso", idProceso) :
                new ObjectParameter("IdProceso", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Inyeccion_AgregarCajon_Result>("Inyeccion_AgregarCajon", idProgramacionPedidoProductoParameter, idPedidoProductoMedidaParameter, cantidadParameter, idProcesoParameter);
        }
    
        public virtual int Inyeccion_GetInyeccionDesvio(Nullable<System.DateTime> fecha, Nullable<int> idInyectora)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var idInyectoraParameter = idInyectora.HasValue ?
                new ObjectParameter("IdInyectora", idInyectora) :
                new ObjectParameter("IdInyectora", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Inyeccion_GetInyeccionDesvio", fechaParameter, idInyectoraParameter);
        }
    
        public virtual int Inyeccion_GetInyeccionDiaria(Nullable<int> idInyectora, Nullable<System.DateTime> fecha)
        {
            var idInyectoraParameter = idInyectora.HasValue ?
                new ObjectParameter("IdInyectora", idInyectora) :
                new ObjectParameter("IdInyectora", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Inyeccion_GetInyeccionDiaria", idInyectoraParameter, fechaParameter);
        }
    
        public virtual int Inyeccion_GetTotalCanastosMedida(Nullable<int> idInyectoraEstacion, Nullable<int> idPedido, Nullable<int> idMedida, Nullable<System.DateTime> fecha, Nullable<int> idInyectora)
        {
            var idInyectoraEstacionParameter = idInyectoraEstacion.HasValue ?
                new ObjectParameter("IdInyectoraEstacion", idInyectoraEstacion) :
                new ObjectParameter("IdInyectoraEstacion", typeof(int));
    
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(int));
    
            var idMedidaParameter = idMedida.HasValue ?
                new ObjectParameter("IdMedida", idMedida) :
                new ObjectParameter("IdMedida", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var idInyectoraParameter = idInyectora.HasValue ?
                new ObjectParameter("IdInyectora", idInyectora) :
                new ObjectParameter("IdInyectora", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Inyeccion_GetTotalCanastosMedida", idInyectoraEstacionParameter, idPedidoParameter, idMedidaParameter, fechaParameter, idInyectoraParameter);
        }
    
        public virtual int Inyeccion_GetTotalCanastosPedidoMedida(Nullable<int> idInyectora, Nullable<int> pedidoEstadoPendiente, Nullable<int> idPedido, Nullable<int> idMedida)
        {
            var idInyectoraParameter = idInyectora.HasValue ?
                new ObjectParameter("IdInyectora", idInyectora) :
                new ObjectParameter("IdInyectora", typeof(int));
    
            var pedidoEstadoPendienteParameter = pedidoEstadoPendiente.HasValue ?
                new ObjectParameter("PedidoEstadoPendiente", pedidoEstadoPendiente) :
                new ObjectParameter("PedidoEstadoPendiente", typeof(int));
    
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(int));
    
            var idMedidaParameter = idMedida.HasValue ?
                new ObjectParameter("IdMedida", idMedida) :
                new ObjectParameter("IdMedida", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Inyeccion_GetTotalCanastosPedidoMedida", idInyectoraParameter, pedidoEstadoPendienteParameter, idPedidoParameter, idMedidaParameter);
        }
    
        public virtual int Inyeccion_ObtenerPedidoInyectadoPorFechaCajon(Nullable<int> cajon, Nullable<int> idInyectora, Nullable<System.DateTime> fecha, Nullable<int> procesoInyeccion, Nullable<int> procesoTerminacion)
        {
            var cajonParameter = cajon.HasValue ?
                new ObjectParameter("Cajon", cajon) :
                new ObjectParameter("Cajon", typeof(int));
    
            var idInyectoraParameter = idInyectora.HasValue ?
                new ObjectParameter("IdInyectora", idInyectora) :
                new ObjectParameter("IdInyectora", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var procesoInyeccionParameter = procesoInyeccion.HasValue ?
                new ObjectParameter("ProcesoInyeccion", procesoInyeccion) :
                new ObjectParameter("ProcesoInyeccion", typeof(int));
    
            var procesoTerminacionParameter = procesoTerminacion.HasValue ?
                new ObjectParameter("ProcesoTerminacion", procesoTerminacion) :
                new ObjectParameter("ProcesoTerminacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Inyeccion_ObtenerPedidoInyectadoPorFechaCajon", cajonParameter, idInyectoraParameter, fechaParameter, procesoInyeccionParameter, procesoTerminacionParameter);
        }
    
        public virtual int Lista_Pedido_Programar(Nullable<int> idProducto, Nullable<int> idMolde, Nullable<int> idColor, Nullable<int> idCliente, string numeroPedido, Nullable<System.DateTime> fechaDesde, Nullable<System.DateTime> fechaHasta)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var idMoldeParameter = idMolde.HasValue ?
                new ObjectParameter("IdMolde", idMolde) :
                new ObjectParameter("IdMolde", typeof(int));
    
            var idColorParameter = idColor.HasValue ?
                new ObjectParameter("IdColor", idColor) :
                new ObjectParameter("IdColor", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var numeroPedidoParameter = numeroPedido != null ?
                new ObjectParameter("NumeroPedido", numeroPedido) :
                new ObjectParameter("NumeroPedido", typeof(string));
    
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(System.DateTime));
    
            var fechaHastaParameter = fechaHasta.HasValue ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Lista_Pedido_Programar", idProductoParameter, idMoldeParameter, idColorParameter, idClienteParameter, numeroPedidoParameter, fechaDesdeParameter, fechaHastaParameter);
        }
    
        public virtual int Make_Cancelations(Nullable<int> idPedidoProductoMedida, Nullable<int> cantidadACancelar)
        {
            var idPedidoProductoMedidaParameter = idPedidoProductoMedida.HasValue ?
                new ObjectParameter("IdPedidoProductoMedida", idPedidoProductoMedida) :
                new ObjectParameter("IdPedidoProductoMedida", typeof(int));
    
            var cantidadACancelarParameter = cantidadACancelar.HasValue ?
                new ObjectParameter("CantidadACancelar", cantidadACancelar) :
                new ObjectParameter("CantidadACancelar", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Make_Cancelations", idPedidoProductoMedidaParameter, cantidadACancelarParameter);
        }
    
        public virtual int Merge_InyectoraOperario(Nullable<int> idInyectora, Nullable<int> personasCantidad, Nullable<decimal> horasCantidad, Nullable<System.DateTime> fechaDesde, Nullable<System.DateTime> fechaHasta, Nullable<System.DateTime> horaInicioJornada, Nullable<decimal> cantidadSuelas, Nullable<bool> finDeSemana)
        {
            var idInyectoraParameter = idInyectora.HasValue ?
                new ObjectParameter("IdInyectora", idInyectora) :
                new ObjectParameter("IdInyectora", typeof(int));
    
            var personasCantidadParameter = personasCantidad.HasValue ?
                new ObjectParameter("PersonasCantidad", personasCantidad) :
                new ObjectParameter("PersonasCantidad", typeof(int));
    
            var horasCantidadParameter = horasCantidad.HasValue ?
                new ObjectParameter("HorasCantidad", horasCantidad) :
                new ObjectParameter("HorasCantidad", typeof(decimal));
    
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(System.DateTime));
    
            var fechaHastaParameter = fechaHasta.HasValue ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(System.DateTime));
    
            var horaInicioJornadaParameter = horaInicioJornada.HasValue ?
                new ObjectParameter("HoraInicioJornada", horaInicioJornada) :
                new ObjectParameter("HoraInicioJornada", typeof(System.DateTime));
    
            var cantidadSuelasParameter = cantidadSuelas.HasValue ?
                new ObjectParameter("CantidadSuelas", cantidadSuelas) :
                new ObjectParameter("CantidadSuelas", typeof(decimal));
    
            var finDeSemanaParameter = finDeSemana.HasValue ?
                new ObjectParameter("FinDeSemana", finDeSemana) :
                new ObjectParameter("FinDeSemana", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Merge_InyectoraOperario", idInyectoraParameter, personasCantidadParameter, horasCantidadParameter, fechaDesdeParameter, fechaHastaParameter, horaInicioJornadaParameter, cantidadSuelasParameter, finDeSemanaParameter);
        }
    
        public virtual ObjectResult<Pedidos_Po_Estacion_Result> Pedidos_Po_Estacion(Nullable<int> idCliente, Nullable<int> idProducto, string numeroPedido, Nullable<System.DateTime> fechaDesde, Nullable<System.DateTime> fechaHasta, Nullable<int> idInyectoraEstacion)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var numeroPedidoParameter = numeroPedido != null ?
                new ObjectParameter("NumeroPedido", numeroPedido) :
                new ObjectParameter("NumeroPedido", typeof(string));
    
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(System.DateTime));
    
            var fechaHastaParameter = fechaHasta.HasValue ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(System.DateTime));
    
            var idInyectoraEstacionParameter = idInyectoraEstacion.HasValue ?
                new ObjectParameter("IdInyectoraEstacion", idInyectoraEstacion) :
                new ObjectParameter("IdInyectoraEstacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pedidos_Po_Estacion_Result>("Pedidos_Po_Estacion", idClienteParameter, idProductoParameter, numeroPedidoParameter, fechaDesdeParameter, fechaHastaParameter, idInyectoraEstacionParameter);
        }
    
        public virtual ObjectResult<Procesos_Tercerizados_Result> Procesos_Tercerizados(string pedidoNumero, Nullable<int> idProducto, Nullable<int> idCliente, Nullable<int> idProceso, string estado)
        {
            var pedidoNumeroParameter = pedidoNumero != null ?
                new ObjectParameter("PedidoNumero", pedidoNumero) :
                new ObjectParameter("PedidoNumero", typeof(string));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idProcesoParameter = idProceso.HasValue ?
                new ObjectParameter("IdProceso", idProceso) :
                new ObjectParameter("IdProceso", typeof(int));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Procesos_Tercerizados_Result>("Procesos_Tercerizados", pedidoNumeroParameter, idProductoParameter, idClienteParameter, idProcesoParameter, estadoParameter);
        }
    
        public virtual ObjectResult<Programacion_De_Terminacion_Result> Programacion_De_Terminacion()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Programacion_De_Terminacion_Result>("Programacion_De_Terminacion");
        }
    
        public virtual int Programacion_GetCajonesReinyectar(Nullable<int> idPedido, Nullable<int> idProcesoInyeccion)
        {
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(int));
    
            var idProcesoInyeccionParameter = idProcesoInyeccion.HasValue ?
                new ObjectParameter("IdProcesoInyeccion", idProcesoInyeccion) :
                new ObjectParameter("IdProcesoInyeccion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Programacion_GetCajonesReinyectar", idPedidoParameter, idProcesoInyeccionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Programacion_GetPedidosProgramadosIntervalos(Nullable<int> idInyectoraEstacion, Nullable<System.DateTime> fechaDesde, Nullable<System.DateTime> fechaHasta)
        {
            var idInyectoraEstacionParameter = idInyectoraEstacion.HasValue ?
                new ObjectParameter("IdInyectoraEstacion", idInyectoraEstacion) :
                new ObjectParameter("IdInyectoraEstacion", typeof(int));
    
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(System.DateTime));
    
            var fechaHastaParameter = fechaHasta.HasValue ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Programacion_GetPedidosProgramadosIntervalos", idInyectoraEstacionParameter, fechaDesdeParameter, fechaHastaParameter);
        }
    
        public virtual int Programacion_GrabarProgramacionPedido(Nullable<int> idInyectoraEstacion, Nullable<int> idPedidoProductoMedida, Nullable<int> cantidadProgramada, Nullable<System.DateTime> fechaMinimaInicio, Nullable<System.DateTime> horaInicio, Nullable<System.DateTime> fechaProgramadaFin, Nullable<System.DateTime> horaProgramadaFin, Nullable<int> horasProgramadas, Nullable<bool> cambioMolde, Nullable<int> idEstadoPedidoProgramado, Nullable<int> idEstadoPedidoPendiente, Nullable<int> idUsuario, Nullable<bool> reinyeccion)
        {
            var idInyectoraEstacionParameter = idInyectoraEstacion.HasValue ?
                new ObjectParameter("IdInyectoraEstacion", idInyectoraEstacion) :
                new ObjectParameter("IdInyectoraEstacion", typeof(int));
    
            var idPedidoProductoMedidaParameter = idPedidoProductoMedida.HasValue ?
                new ObjectParameter("IdPedidoProductoMedida", idPedidoProductoMedida) :
                new ObjectParameter("IdPedidoProductoMedida", typeof(int));
    
            var cantidadProgramadaParameter = cantidadProgramada.HasValue ?
                new ObjectParameter("CantidadProgramada", cantidadProgramada) :
                new ObjectParameter("CantidadProgramada", typeof(int));
    
            var fechaMinimaInicioParameter = fechaMinimaInicio.HasValue ?
                new ObjectParameter("FechaMinimaInicio", fechaMinimaInicio) :
                new ObjectParameter("FechaMinimaInicio", typeof(System.DateTime));
    
            var horaInicioParameter = horaInicio.HasValue ?
                new ObjectParameter("HoraInicio", horaInicio) :
                new ObjectParameter("HoraInicio", typeof(System.DateTime));
    
            var fechaProgramadaFinParameter = fechaProgramadaFin.HasValue ?
                new ObjectParameter("FechaProgramadaFin", fechaProgramadaFin) :
                new ObjectParameter("FechaProgramadaFin", typeof(System.DateTime));
    
            var horaProgramadaFinParameter = horaProgramadaFin.HasValue ?
                new ObjectParameter("HoraProgramadaFin", horaProgramadaFin) :
                new ObjectParameter("HoraProgramadaFin", typeof(System.DateTime));
    
            var horasProgramadasParameter = horasProgramadas.HasValue ?
                new ObjectParameter("HorasProgramadas", horasProgramadas) :
                new ObjectParameter("HorasProgramadas", typeof(int));
    
            var cambioMoldeParameter = cambioMolde.HasValue ?
                new ObjectParameter("CambioMolde", cambioMolde) :
                new ObjectParameter("CambioMolde", typeof(bool));
    
            var idEstadoPedidoProgramadoParameter = idEstadoPedidoProgramado.HasValue ?
                new ObjectParameter("IdEstadoPedidoProgramado", idEstadoPedidoProgramado) :
                new ObjectParameter("IdEstadoPedidoProgramado", typeof(int));
    
            var idEstadoPedidoPendienteParameter = idEstadoPedidoPendiente.HasValue ?
                new ObjectParameter("IdEstadoPedidoPendiente", idEstadoPedidoPendiente) :
                new ObjectParameter("IdEstadoPedidoPendiente", typeof(int));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var reinyeccionParameter = reinyeccion.HasValue ?
                new ObjectParameter("Reinyeccion", reinyeccion) :
                new ObjectParameter("Reinyeccion", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Programacion_GrabarProgramacionPedido", idInyectoraEstacionParameter, idPedidoProductoMedidaParameter, cantidadProgramadaParameter, fechaMinimaInicioParameter, horaInicioParameter, fechaProgramadaFinParameter, horaProgramadaFinParameter, horasProgramadasParameter, cambioMoldeParameter, idEstadoPedidoProgramadoParameter, idEstadoPedidoPendienteParameter, idUsuarioParameter, reinyeccionParameter);
        }
    
        public virtual int Programacion_ProgramarFechaFin(Nullable<System.DateTime> fechaMinimaInicio, Nullable<System.DateTime> horaInicio, Nullable<int> idInyectoraEstacion, Nullable<int> cantidadPedida, Nullable<int> idPedidoProductoMedida)
        {
            var fechaMinimaInicioParameter = fechaMinimaInicio.HasValue ?
                new ObjectParameter("FechaMinimaInicio", fechaMinimaInicio) :
                new ObjectParameter("FechaMinimaInicio", typeof(System.DateTime));
    
            var horaInicioParameter = horaInicio.HasValue ?
                new ObjectParameter("HoraInicio", horaInicio) :
                new ObjectParameter("HoraInicio", typeof(System.DateTime));
    
            var idInyectoraEstacionParameter = idInyectoraEstacion.HasValue ?
                new ObjectParameter("IdInyectoraEstacion", idInyectoraEstacion) :
                new ObjectParameter("IdInyectoraEstacion", typeof(int));
    
            var cantidadPedidaParameter = cantidadPedida.HasValue ?
                new ObjectParameter("CantidadPedida", cantidadPedida) :
                new ObjectParameter("CantidadPedida", typeof(int));
    
            var idPedidoProductoMedidaParameter = idPedidoProductoMedida.HasValue ?
                new ObjectParameter("IdPedidoProductoMedida", idPedidoProductoMedida) :
                new ObjectParameter("IdPedidoProductoMedida", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Programacion_ProgramarFechaFin", fechaMinimaInicioParameter, horaInicioParameter, idInyectoraEstacionParameter, cantidadPedidaParameter, idPedidoProductoMedidaParameter);
        }
    
        public virtual int ResetUserPassword(string nombreUsuario, string password, string passwordSalt)
        {
            var nombreUsuarioParameter = nombreUsuario != null ?
                new ObjectParameter("NombreUsuario", nombreUsuario) :
                new ObjectParameter("NombreUsuario", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ResetUserPassword", nombreUsuarioParameter, passwordParameter, passwordSaltParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int Update_despacho_tercero_from_tercerizado(Nullable<int> idDespachoTercero, Nullable<int> scrapTotal, Nullable<int> cantidadRecibida)
        {
            var idDespachoTerceroParameter = idDespachoTercero.HasValue ?
                new ObjectParameter("IdDespachoTercero", idDespachoTercero) :
                new ObjectParameter("IdDespachoTercero", typeof(int));
    
            var scrapTotalParameter = scrapTotal.HasValue ?
                new ObjectParameter("ScrapTotal", scrapTotal) :
                new ObjectParameter("ScrapTotal", typeof(int));
    
            var cantidadRecibidaParameter = cantidadRecibida.HasValue ?
                new ObjectParameter("CantidadRecibida", cantidadRecibida) :
                new ObjectParameter("CantidadRecibida", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_despacho_tercero_from_tercerizado", idDespachoTerceroParameter, scrapTotalParameter, cantidadRecibidaParameter);
        }
    
        public virtual int Update_Tercerizados(Nullable<int> idEmbalaje)
        {
            var idEmbalajeParameter = idEmbalaje.HasValue ?
                new ObjectParameter("IdEmbalaje", idEmbalaje) :
                new ObjectParameter("IdEmbalaje", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Tercerizados", idEmbalajeParameter);
        }
    }
}
