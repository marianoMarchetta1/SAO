//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// <responsibility>
//     Especification Pattern used in the Data Layer to filter the sets of
//     data entities.
// </responsibility>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Linq;

namespace IngematicaAngularBase.Dal.Specification
{
	public static partial class PedidoSpecification
	{
		public static IQueryable<IngematicaAngularBase.Model.Entities.Pedido> WithIdPedido(this IQueryable<IngematicaAngularBase.Model.Entities.Pedido> source, int? value)
		{
			if (value != null)
				return source.Where(p => p.IdPedido == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Pedido> WithNumero(this IQueryable<IngematicaAngularBase.Model.Entities.Pedido> source, int? value)
		{
			if (value != null)
				return source.Where(p => p.Numero == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Pedido> WithIdPedidoEstado(this IQueryable<IngematicaAngularBase.Model.Entities.Pedido> source, int? value)
		{
			if (value != null)
				return source.Where(p => p.IdPedidoEstado == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Pedido> WithIdCliente(this IQueryable<IngematicaAngularBase.Model.Entities.Pedido> source, int? value)
		{
			if (value != null)
				return source.Where(p => p.IdCliente == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Pedido> WithIdClienteDireccionEntrega(this IQueryable<IngematicaAngularBase.Model.Entities.Pedido> source, int? value)
		{
			if (value != null)
				return source.Where(p => p.IdClienteDireccionEntrega == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Pedido> WithIdProducto(this IQueryable<IngematicaAngularBase.Model.Entities.Pedido> source, int? value)
		{
			if (value != null)
				return source.Where(p => p.IdProducto == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Pedido> WithFechaAlta(this IQueryable<IngematicaAngularBase.Model.Entities.Pedido> source, System.DateTime? value)
		{
			if (value != null)
				return source.Where(p => p.FechaAlta == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Pedido> WithFechaAltaBetweenWithTime(this IQueryable<IngematicaAngularBase.Model.Entities.Pedido> source, System.DateTime? lower, System.DateTime? upper)
		{
            var range = source;
           
            if (lower != null)
                range = range.Where(p => p.FechaAlta >= lower);

            if (upper != null)
                range = range.Where(p => p.FechaAlta <= upper);

            return range;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Pedido> WithFechaAltaBetween(this IQueryable<IngematicaAngularBase.Model.Entities.Pedido> source, System.DateTime? lower, System.DateTime? upper)
		{
            var range = source;
           
            if (lower != null)
                range = range.Where(p => p.FechaAlta >= lower);

            if (upper != null)
			{
				upper = upper.Value.Date.AddDays(1);
                range = range.Where(p => p.FechaAlta < upper);
			}

            return range;
		}


		public static IQueryable<IngematicaAngularBase.Model.Entities.Pedido> WithOrdenCompra(this IQueryable<IngematicaAngularBase.Model.Entities.Pedido> source, string value)
		{
			if (value != null)
				return source.Where(p => p.OrdenCompra == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Pedido> WithContainsOrdenCompra(this IQueryable<IngematicaAngularBase.Model.Entities.Pedido> source, string value)
		{
			if (value != null)
				return source.Where(p => p.OrdenCompra.Contains(value));
			
			return source;
		}


		public static IQueryable<IngematicaAngularBase.Model.Entities.Pedido> WithIdPedidoTipo(this IQueryable<IngematicaAngularBase.Model.Entities.Pedido> source, int? value)
		{
			if (value != null)
				return source.Where(p => p.IdPedidoTipo == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Pedido> WithIdUsuarioAlta(this IQueryable<IngematicaAngularBase.Model.Entities.Pedido> source, int? value)
		{
			if (value != null)
				return source.Where(p => p.IdUsuarioAlta == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Pedido> WithIdUsuarioModificacion(this IQueryable<IngematicaAngularBase.Model.Entities.Pedido> source, int? value)
		{
			if (value != null)
				return source.Where(p => p.IdUsuarioModificacion == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Pedido> WithFechaModificacion(this IQueryable<IngematicaAngularBase.Model.Entities.Pedido> source, System.DateTime? value)
		{
			if (value != null)
				return source.Where(p => p.FechaModificacion == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Pedido> WithFechaModificacionBetweenWithTime(this IQueryable<IngematicaAngularBase.Model.Entities.Pedido> source, System.DateTime? lower, System.DateTime? upper)
		{
            var range = source;
           
            if (lower != null)
                range = range.Where(p => p.FechaModificacion >= lower);

            if (upper != null)
                range = range.Where(p => p.FechaModificacion <= upper);

            return range;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Pedido> WithFechaModificacionBetween(this IQueryable<IngematicaAngularBase.Model.Entities.Pedido> source, System.DateTime? lower, System.DateTime? upper)
		{
            var range = source;
           
            if (lower != null)
                range = range.Where(p => p.FechaModificacion >= lower);

            if (upper != null)
			{
				upper = upper.Value.Date.AddDays(1);
                range = range.Where(p => p.FechaModificacion < upper);
			}

            return range;
		}

	}
}
