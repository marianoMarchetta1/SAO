//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// <responsibility>
//     Especification Pattern used in the Data Layer to filter the sets of
//     data entities.
// </responsibility>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Linq;

namespace IngematicaAngularBase.Dal.Specification
{
	public static partial class MateriaPrimaSpecification
	{
		public static IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> WithIdMateriaPrima(this IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> source, int? value)
		{
			if (value != null)
				return source.Where(p => p.IdMateriaPrima == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> WithIdMateriaPrimaClase(this IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> source, int? value)
		{
			if (value != null)
				return source.Where(p => p.IdMateriaPrimaClase == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> WithNombre(this IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> source, string value)
		{
			if (value != null)
				return source.Where(p => p.Nombre == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> WithContainsNombre(this IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> source, string value)
		{
			if (value != null)
				return source.Where(p => p.Nombre.Contains(value));
			
			return source;
		}


		public static IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> WithIdMateriaPrimaMarca(this IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> source, int? value)
		{
			if (value != null)
				return source.Where(p => p.IdMateriaPrimaMarca == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> WithComentario(this IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> source, string value)
		{
			if (value != null)
				return source.Where(p => p.Comentario == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> WithContainsComentario(this IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> source, string value)
		{
			if (value != null)
				return source.Where(p => p.Comentario.Contains(value));
			
			return source;
		}


		public static IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> WithActivo(this IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> source, bool? value)
		{
			if (value != null)
				return source.Where(p => p.Activo == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> WithIdUsuarioAlta(this IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> source, int? value)
		{
			if (value != null)
				return source.Where(p => p.IdUsuarioAlta == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> WithFechaAlta(this IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> source, System.DateTime? value)
		{
			if (value != null)
				return source.Where(p => p.FechaAlta == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> WithFechaAltaBetweenWithTime(this IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> source, System.DateTime? lower, System.DateTime? upper)
		{
            var range = source;
           
            if (lower != null)
                range = range.Where(p => p.FechaAlta >= lower);

            if (upper != null)
                range = range.Where(p => p.FechaAlta <= upper);

            return range;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> WithFechaAltaBetween(this IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> source, System.DateTime? lower, System.DateTime? upper)
		{
            var range = source;
           
            if (lower != null)
                range = range.Where(p => p.FechaAlta >= lower);

            if (upper != null)
			{
				upper = upper.Value.Date.AddDays(1);
                range = range.Where(p => p.FechaAlta < upper);
			}

            return range;
		}


		public static IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> WithIdUsuarioModificacion(this IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> source, int? value)
		{
			if (value != null)
				return source.Where(p => p.IdUsuarioModificacion == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> WithFechaModificacion(this IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> source, System.DateTime? value)
		{
			if (value != null)
				return source.Where(p => p.FechaModificacion == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> WithFechaModificacionBetweenWithTime(this IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> source, System.DateTime? lower, System.DateTime? upper)
		{
            var range = source;
           
            if (lower != null)
                range = range.Where(p => p.FechaModificacion >= lower);

            if (upper != null)
                range = range.Where(p => p.FechaModificacion <= upper);

            return range;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> WithFechaModificacionBetween(this IQueryable<IngematicaAngularBase.Model.Entities.MateriaPrima> source, System.DateTime? lower, System.DateTime? upper)
		{
            var range = source;
           
            if (lower != null)
                range = range.Where(p => p.FechaModificacion >= lower);

            if (upper != null)
			{
				upper = upper.Value.Date.AddDays(1);
                range = range.Where(p => p.FechaModificacion < upper);
			}

            return range;
		}

	}
}
