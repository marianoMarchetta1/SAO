//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// <responsibility>
//     Especification Pattern used in the Data Layer to filter the sets of
//     data entities.
// </responsibility>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Linq;

namespace IngematicaAngularBase.Dal.Specification
{
	public static partial class SecurityClientSpecification
	{
		public static IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> WithIdSecurityClient(this IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> source, int? value)
		{
			if (value != null)
				return source.Where(p => p.IdSecurityClient == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> WithName(this IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> source, string value)
		{
			if (value != null)
				return source.Where(p => p.Name == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> WithContainsName(this IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> source, string value)
		{
			if (value != null)
				return source.Where(p => p.Name.Contains(value));
			
			return source;
		}


		public static IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> WithSecret(this IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> source, string value)
		{
			if (value != null)
				return source.Where(p => p.Secret == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> WithContainsSecret(this IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> source, string value)
		{
			if (value != null)
				return source.Where(p => p.Secret.Contains(value));
			
			return source;
		}


		public static IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> WithDescription(this IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> source, string value)
		{
			if (value != null)
				return source.Where(p => p.Description == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> WithContainsDescription(this IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> source, string value)
		{
			if (value != null)
				return source.Where(p => p.Description.Contains(value));
			
			return source;
		}


		public static IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> WithApplicationType(this IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> source, int? value)
		{
			if (value != null)
				return source.Where(p => p.ApplicationType == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> WithActive(this IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> source, bool? value)
		{
			if (value != null)
				return source.Where(p => p.Active == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> WithRefreshTokenLifeTime(this IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> source, int? value)
		{
			if (value != null)
				return source.Where(p => p.RefreshTokenLifeTime == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> WithAllowedOrigin(this IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> source, string value)
		{
			if (value != null)
				return source.Where(p => p.AllowedOrigin == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> WithContainsAllowedOrigin(this IQueryable<IngematicaAngularBase.Model.Entities.SecurityClient> source, string value)
		{
			if (value != null)
				return source.Where(p => p.AllowedOrigin.Contains(value));
			
			return source;
		}

	}
}
