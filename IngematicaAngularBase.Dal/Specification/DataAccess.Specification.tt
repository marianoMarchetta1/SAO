<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ include file="EF.Utility.CS.ttinclude"#><#@ output extension=".cs"#>
<#@ import namespace="System.Linq" #>
<#
CodeGenerationTools code = new CodeGenerationTools(this);
MetadataTools ef = new MetadataTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this);

string inputFile = @"..\..\IngematicaAngularBase.Dal\DbModel.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
if (container == null)
{
	return "// No EntityContainer exists in the model, so no code was generated";
}

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>().OrderBy(x => x.ElementType.Name))
{
	fileManager.StartNewFile(code.Escape(entitySet.ElementType) + ".cs");
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// <responsibility>
//     Especification Pattern used in the Data Layer to filter the sets of
//     data entities.
// </responsibility>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Linq;

namespace <#=code.EscapeNamespace(namespaceName)#>
{
	public static partial class <#=code.Escape(entitySet.ElementType)#>Specification
	{<#
		foreach (var property in entitySet.ElementType.Properties) 
		{
			switch (((PrimitiveType)property.TypeUsage.EdmType).PrimitiveTypeKind)
			{
				case System.Data.Metadata.Edm.PrimitiveTypeKind.String:
#>

		public static IQueryable<<#= GetEntityNamespace() + code.Escape(entitySet.ElementType)#>> With<#= property.Name #>(this IQueryable<<#= GetEntityNamespace() + code.Escape(entitySet.ElementType)#>> source, <#= code.Escape(property.TypeUsage) #> value)
		{
			if (value != null)
				return source.Where(p => p.<#= property.Name #> == value);
			
			return source;
		}

		public static IQueryable<<#= GetEntityNamespace() + code.Escape(entitySet.ElementType)#>> WithContains<#= property.Name #>(this IQueryable<<#= GetEntityNamespace() + code.Escape(entitySet.ElementType)#>> source, <#= code.Escape(property.TypeUsage) #> value)
		{
			if (value != null)
				return source.Where(p => p.<#= property.Name #>.Contains(value));
			
			return source;
		}

<#
					break;
				default:
#>

		public static IQueryable<<#= GetEntityNamespace() + code.Escape(entitySet.ElementType)#>> With<#= property.Name #>(this IQueryable<<#= GetEntityNamespace() + code.Escape(entitySet.ElementType)#>> source, <#= code.Escape(property.TypeUsage).Replace("Nullable<", "").Replace(">", "") #><#= IsNullable(property.TypeUsage.EdmType) ? "?" : string.Empty #> value)
		{
			if (value != null)
				return source.Where(p => p.<#= property.Name #> == value);
			
			return source;
		}
<#
					if (MustEmitRange(property.TypeUsage.EdmType))
					{
#>

		public static IQueryable<<#= GetEntityNamespace() + code.Escape(entitySet.ElementType)#>> With<#= property.Name #>BetweenWithTime(this IQueryable<<#= GetEntityNamespace() + code.Escape(entitySet.ElementType)#>> source, <#= code.Escape(property.TypeUsage).Replace("Nullable<", "").Replace(">", "") #><#= IsNullable(property.TypeUsage.EdmType) ? "?" : string.Empty #> lower, <#= code.Escape(property.TypeUsage).Replace("Nullable<", "").Replace(">", "") #><#= IsNullable(property.TypeUsage.EdmType) ? "?" : string.Empty #> upper)
		{
            var range = source;
           
            if (lower != null)
                range = range.Where(p => p.<#= property.Name #> >= lower);

            if (upper != null)
                range = range.Where(p => p.<#= property.Name #> <= upper);

            return range;
		}

		public static IQueryable<<#= GetEntityNamespace() + code.Escape(entitySet.ElementType)#>> With<#= property.Name #>Between(this IQueryable<<#= GetEntityNamespace() + code.Escape(entitySet.ElementType)#>> source, <#= code.Escape(property.TypeUsage).Replace("Nullable<", "").Replace(">", "") #><#= IsNullable(property.TypeUsage.EdmType) ? "?" : string.Empty #> lower, <#= code.Escape(property.TypeUsage).Replace("Nullable<", "").Replace(">", "") #><#= IsNullable(property.TypeUsage.EdmType) ? "?" : string.Empty #> upper)
		{
            var range = source;
           
            if (lower != null)
                range = range.Where(p => p.<#= property.Name #> >= lower);

            if (upper != null)
			{
				upper = upper.Value.Date.AddDays(1);
                range = range.Where(p => p.<#= property.Name #> < upper);
			}

            return range;
		}

<#
					}
					break;
			}
		} 
#>
	}
}
<#
	}
#>
<# fileManager.Process(); #>
<#+
string GetKeyType(EntitySet entitySet)
{
	string output = string.Empty;
	foreach (var key in entitySet.ElementType.KeyMembers) 
	{
		output = key.TypeUsage.EdmType.Name;
		break;
	}
	return output;
}
#>
<#+
string GetKey(EntitySet entitySet)
{
	string output = string.Empty;
	foreach (var key in entitySet.ElementType.KeyMembers) 
	{
		output = key.Name;
		break;
	}
	return output;
}
#>
<#+ string ToCammelCase(string value)
{
	return value[0].ToString().ToLower() + value.Substring(1);
}
#>
<#+
bool MustEmitRange(EdmType type)
{
	var typeEnum = ((PrimitiveType)type).PrimitiveTypeKind;
	switch (typeEnum)
	{
		case PrimitiveTypeKind.DateTime:
			return true;
		default:
			return false;
	}
}
#>
<#+ 
bool IsNullable(EdmType type)
{
	var typeEnum = ((PrimitiveType)type).PrimitiveTypeKind;
	switch (typeEnum)
	{
		case PrimitiveTypeKind.Byte:
		case PrimitiveTypeKind.DateTime:
		case PrimitiveTypeKind.DateTimeOffset:
		case PrimitiveTypeKind.Decimal:
		case PrimitiveTypeKind.Double:
		case PrimitiveTypeKind.Int16:
		case PrimitiveTypeKind.Int32:
		case PrimitiveTypeKind.Int64:
		case PrimitiveTypeKind.SByte:
		case PrimitiveTypeKind.Single:
		case PrimitiveTypeKind.Time:
		case PrimitiveTypeKind.Boolean:
		case PrimitiveTypeKind.Guid:
			return true;
		default:
			return false;
	}
}
#>
<#+
string GetEntityNamespace()
{
	return "IngematicaAngularBase.Model.Entities.";
}
#>