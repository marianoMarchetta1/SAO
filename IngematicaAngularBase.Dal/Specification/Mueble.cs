//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// <responsibility>
//     Especification Pattern used in the Data Layer to filter the sets of
//     data entities.
// </responsibility>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Linq;

namespace IngematicaAngularBase.Dal.Specification
{
	public static partial class MuebleSpecification
	{
		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithIdMueble(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, int? value)
		{
			if (value != null)
				return source.Where(p => p.IdMueble == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithNombre(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, string value)
		{
			if (value != null)
				return source.Where(p => p.Nombre == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithContainsNombre(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, string value)
		{
			if (value != null)
				return source.Where(p => p.Nombre.Contains(value));
			
			return source;
		}


		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithLargo(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, decimal? value)
		{
			if (value != null)
				return source.Where(p => p.Largo == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithAncho(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, decimal? value)
		{
			if (value != null)
				return source.Where(p => p.Ancho == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithPoseeRadio(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, bool? value)
		{
			if (value != null)
				return source.Where(p => p.PoseeRadio == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithRadioMayor(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, decimal? value)
		{
			if (value != null)
				return source.Where(p => p.RadioMayor == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithRadioMenor(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, decimal? value)
		{
			if (value != null)
				return source.Where(p => p.RadioMenor == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithPrecio(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, decimal? value)
		{
			if (value != null)
				return source.Where(p => p.Precio == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithIdUsuarioAlta(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, int? value)
		{
			if (value != null)
				return source.Where(p => p.IdUsuarioAlta == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithFechaAlta(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, System.DateTime? value)
		{
			if (value != null)
				return source.Where(p => p.FechaAlta == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithFechaAltaBetweenWithTime(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, System.DateTime? lower, System.DateTime? upper)
		{
            var range = source;
           
            if (lower != null)
                range = range.Where(p => p.FechaAlta >= lower);

            if (upper != null)
                range = range.Where(p => p.FechaAlta <= upper);

            return range;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithFechaAltaBetween(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, System.DateTime? lower, System.DateTime? upper)
		{
            var range = source;
           
            if (lower != null)
                range = range.Where(p => p.FechaAlta >= lower);

            if (upper != null)
			{
				upper = upper.Value.Date.AddDays(1);
                range = range.Where(p => p.FechaAlta < upper);
			}

            return range;
		}


		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithIdUsuarioModificacion(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, int? value)
		{
			if (value != null)
				return source.Where(p => p.IdUsuarioModificacion == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithFechaModificacion(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, System.DateTime? value)
		{
			if (value != null)
				return source.Where(p => p.FechaModificacion == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithFechaModificacionBetweenWithTime(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, System.DateTime? lower, System.DateTime? upper)
		{
            var range = source;
           
            if (lower != null)
                range = range.Where(p => p.FechaModificacion >= lower);

            if (upper != null)
                range = range.Where(p => p.FechaModificacion <= upper);

            return range;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithFechaModificacionBetween(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, System.DateTime? lower, System.DateTime? upper)
		{
            var range = source;
           
            if (lower != null)
                range = range.Where(p => p.FechaModificacion >= lower);

            if (upper != null)
			{
				upper = upper.Value.Date.AddDays(1);
                range = range.Where(p => p.FechaModificacion < upper);
			}

            return range;
		}


		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithDistanciaProximoMueble(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, decimal? value)
		{
			if (value != null)
				return source.Where(p => p.DistanciaProximoMueble == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithActivo(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, bool? value)
		{
			if (value != null)
				return source.Where(p => p.Activo == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithCodigo(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, string value)
		{
			if (value != null)
				return source.Where(p => p.Codigo == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithContainsCodigo(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, string value)
		{
			if (value != null)
				return source.Where(p => p.Codigo.Contains(value));
			
			return source;
		}


		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithImagen(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, string value)
		{
			if (value != null)
				return source.Where(p => p.Imagen == value);
			
			return source;
		}

		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithContainsImagen(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, string value)
		{
			if (value != null)
				return source.Where(p => p.Imagen.Contains(value));
			
			return source;
		}


		public static IQueryable<IngematicaAngularBase.Model.Entities.Mueble> WithDistanciaParedes(this IQueryable<IngematicaAngularBase.Model.Entities.Mueble> source, decimal? value)
		{
			if (value != null)
				return source.Where(p => p.DistanciaParedes == value);
			
			return source;
		}
	}
}
